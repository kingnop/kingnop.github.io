<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[并行程序设计实验报告]]></title>
    <url>%2F2018%2F12%2F24%2F%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A%2F</url>
    <content type="text"><![CDATA[本文是研一课程《并行程序设计》的实验报告 并行程序设计实验报告 1. 公共部分用MPI_Send和MPI_Recv实现MPI_Allgather的功能，并测试性能MPI_Allgaeher是一个多对多通信的函数，其格式如下： 12int MPI_Allgather(void *SendAddress, int SendCount, MPI_Datatype SendDatatype, void *RecvAddress, int RecvCount, MPI_Datatype RecvDatatype, MPI_Comm Comm); 其操作相当于每个进程都作为root进程执行了一次Gather调用，即每一个进程都收集来自所有进程（包括自己）的数据。 而MPI_Send和MPI_Recv是MPI的最基本函数，其调用格式如下： 123int MPI_Send(void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm);int MPI_Recv(void *buf, int count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPIStatus status); 从MPI_Allgather的原理中不难看出，假设共有n个进程，只要让通信域内的每个进程都执行(n-1)次MPI_Send和MPI_Recv函数，然后自己把自己的数据由发送缓存存放到接受缓存中即可。实现代码如下： 1234567891011121314151617181920212223void My_MPI_Allgather(int* send_data, int send_count, MPI_Datatype send_datatype, int* recv_data, int recv_count, MPI_Datatype recv_datatype, MPI_Comm communicator)&#123; int i; int rank, nproc; MPI_Status status; MPI_Comm_size(MPI_COMM_WORLD, &amp;nproc); MPI_Comm_rank(MPI_COMM_WORLD, &amp;rank); for(i=0; i&lt;nproc; i++) &#123; if(i != rank) //不给自己发送 MPI_Send(send_data, send_count, send_datatype, i, rank, communicator); &#125; MPI_Barrier(MPI_COMM_WORLD); for(i=0; i&lt;nproc; i++) &#123; if(i != rank) //不接受自己的数据 MPI_Recv(&amp;recv_data[i], recv_count, recv_datatype, i, i, communicator, &amp;status); else //直接把自己的数据从发送缓存保存到接受缓存中去 recv_data[i] = *send_data; &#125; MPI_Barrier(MPI_COMM_WORLD);&#125; My_MPI_Allgather函数仿照MPI_Allgather函数实现，传入参数与原生函数相同。函数内实现了上述说的功能，所有进程将数据发送给其他进程，调用MPI_Barrier函数等待通信域内所有进程发送结束，然后所有进程接收其他进程发来的消息。 用脚本分别运行原本的MPI_Allgather和自己实现的My_MPI_Allgather100次，时间记录如下图（4个处理器）。 运行时间平均值分别为0.000219和0.000223。方差分别为 $ 2.21166\times10^{-8} $和$1.35786\times10^{-8}$，可以看出MPI原生实现具有更好的效率。推测在需要通信的数据量更大的情况下，MPI原生实现的优势将更大。 抽象的并行算法描述如下： Begin 对所有处理器 $rank(rank=0, \cdots, p-1)$同时执行如下的算法： if(i != rank) then 执行MPI_Send函数将待发送数据发送到第i个处理器中 end if 等待所有处理器发送完毕 if(i != rank) then 执行MPI_Recv函数收取第i个处理器发过来的数据 else 将自身的数据拷贝到接收缓存中 end if End FOX矩阵相乘的MPI并行算法实现Fox算法（Fox Algorithm）是一个计算矩阵乘法的并行算法。 抽象的并行算法描述如下： 输入：$A{n\times n}$，$B{n\times n}$注意矩阵$A$和$B$都为方阵 输出：$C_{n\times n}$ Begin ​ 对所有处理器$my_rank(my_rank=0, \cdots, p-1)$同时执行如下的算法 将输入的矩阵$A$和$B$分成$p$个方块，$A{i.j}$和$B{i.j}(0\leq \sqrt{p}-1)$，其中每块大小为$(n/\sqrt{p})\times (n/\sqrt{p})$ 将$p$个方块分配给$\sqrt{p}\times \sqrt{p}$个处理器 处理器按照行和列划分为两个通信子域，每个处理器$P{i,j}$存放有矩阵块$A{i,j}$和$B{i,j}$，并负责计算矩阵块$C{i,j}$ For i=0 to $\sqrt{p}$ : 把$A_{i,i}$向行子域进行一到多播送 各处理器计算$temp=temp + A{i,i}\times B{i,j}$ $B{i,j}-&gt;B{i+1,j}$ $A{i,j}-&gt;A{i,j+1}$ 转到第二步重复 End 下面是实现Fox算法的函数： 1234567891011121314151617181920212223242526272829303132333435363738394041424344void Fox( int n /* in */, GRID_INFO_T* grid /* in */, LOCAL_MATRIX_T* local_A /* in */, LOCAL_MATRIX_T* local_B /* in */, LOCAL_MATRIX_T* local_C /* out */) &#123; LOCAL_MATRIX_T* temp_A; /* Storage for the sub- */ /* matrix of A used during */ /* the current stage */ int stage; int bcast_root; int n_bar; /* n/sqrt(p) */ int source; int dest; MPI_Status status; n_bar = n/grid-&gt;q; Set_to_zero(local_C); /* Calculate addresses for circular shift of B */ source = (grid-&gt;my_row + 1) % grid-&gt;q; dest = (grid-&gt;my_row + grid-&gt;q - 1) % grid-&gt;q; /* Set aside storage for the broadcast block of A */ temp_A = Local_matrix_allocate(n_bar); for (stage = 0; stage &lt; grid-&gt;q; stage++) &#123; bcast_root = (grid-&gt;my_row + stage) % grid-&gt;q; if (bcast_root == grid-&gt;my_col) &#123; MPI_Bcast(local_A, 1, local_matrix_mpi_t, bcast_root, grid-&gt;row_comm); Local_matrix_multiply(local_A, local_B, local_C); &#125; else &#123; MPI_Bcast(temp_A, 1, local_matrix_mpi_t, bcast_root, grid-&gt;row_comm); Local_matrix_multiply(temp_A, local_B, local_C); &#125; MPI_Sendrecv_replace(local_B, 1, local_matrix_mpi_t, dest, 0, source, 0, grid-&gt;col_comm, &amp;status); &#125; /* for */&#125; 2. 个人实验个人实验部分我选择的是对RSA加密算法的并行化处理。 RSA加密算法是一种非对称的加密算法。对极大整数做因数分解的难度决定了RSA算法的可靠性。换言之，对一极大整数做因数分解愈困难，RSA算法愈可靠。假如有人找到一种快速因数分解的算法的话，那么用RSA加密的信息的可靠性就肯定会极度下降。但找到这样的算法的可能性是非常小的。今天只有短的RSA钥匙才可能被强力方式解破。到目前为止，世界上还没有任何可靠的攻击RSA算法的方式。只要其钥匙的长度足够长，用RSA加密的信息实际上是不能被解破的。 公钥和私钥的产生 随意选择两个大的质数$p$和$q$，$p$不等于$q$。计算$N=p\times q$ 根据欧拉函数，求得$\gamma=\phi(N)=\phi(p)\times\phi(q)=(p-1)\times(q-1)$ 选择一个小于$\gamma$的整数$e$，使得$e$与$\gamma$互质。并求得$e$关于$\gamma$的乘法逆元，记为$d$，满足$ed\equiv 1(\mod \gamma)$（使用扩展欧几里得算法计算） 将$p$和$q$的记录销毁。此时$(N,e)$是公钥，$(N,d)$是私钥。公钥可以公开出去，而私钥需要保存起来。 加密和解密消息加密消息只需要知道公开的公钥$(N,e)$即可。可以用约定好的规则将消息转化为一个小于$N$的非负数$n$，例如将每个字符转为这个字的Unicode码，然后将这些数字连在一起组成一个数字，如果消息非常长的话可以将消息分为若干段。然后利用下面这个公式就可以将消息加密：$$c\equiv n^{e}(\mod N)$$ 可以利用快速幂算法计算$c$，以防止计算过程中数据溢出。 对方收到密码消息$c$之后就可以使用私钥$(N,d)$来解密消息：$$n\equiv c^{d}(\mod N)$$ 并行方式的选择由上述加解密过程我们可以看到，加解密过程实际只涉及到两个快速幂求余的计算，并没有涉及到消息传递的内容，但是因为质数$N$的值非常大，还是需要并行化来加快速度的。因此我选择了OpenMP作为并行化方式。 并行化设计实际的并行化设计也比较简单，在快速幂的for循环前面加上OpenMP并行化制导语句就可以了。相关代码如下： 12345678910111213141516int encrypt(long int* in, long int exp, long int mod, long int* out, size_t len)&#123; #pragma omp parallel for for (int i=0; i &lt; len; i++) &#123; long int c = in[i]; for (int z=1;z&lt;exp;z++) &#123; c *= in[i]; c %= mod; &#125; out[i] = c; &#125; out[len]='\0'; return 0;&#125; 解密的函数内容和加密函数内容完全一致。 数据依赖关系分析可以看到并行化的for循环语句序列为： 1234S: c = in[i]T: c = c*in[i]U: c = c % modV: out[i] = c 分析出以下数据依赖关系： $S \delta^{f}T$，$S\delta^{o}T$，$T\delta^{f}U$，$T\delta^{o}U$，$T\delta^{a}U$，$U\delta^{f}V$ 实验结果分析输入：前两行为两个大素数，第三行为待加密消息 123800513659Hello World! I love ParaProgramming!!! 采用OpenMP并行的rsa_omp.cpp程序的运行结果：（2线程） 12345678Hello World! I love ParaProgramming!!!public key: 17113, 292906609private key: 278038877, 292906609Original text: Hello World! I love ParaProgramming!!!Encrypted text: 7Ԃ󿿕L&gt;ሷⷻแ႓*;&gt;&gt;&gt;Encrypt time is: 6msDecrypted text: Hello World! I love ParaProgramming!!!Encrypt time is: 100680ms 我们可以看到加密用时6毫秒，解密用时100680毫秒。 下面是4线程的运行结果： 12345678Hello World! I love ParaProgramming!!!public key: 17113, 292906609private key: 278038877, 292906609Original text: Hello World! I love ParaProgramming!!!Encrypted text: 7Ԃ󿿕L&gt;ሷⷻแ႓*;&gt;&gt;&gt;Encrypt time is: 5msDecrypted text: Hello World! I love ParaProgramming!!!Encrypt time is: 53791ms 可以看到加密用时5毫秒，解密用时53791毫秒。解密用时差不多是2线程的一半时间。 下面是8线程的运行结果： 12345678Hello World! I love ParaProgramming!!!public key: 17113, 292906609private key: 278038877, 292906609Original text: Hello World! I love ParaProgramming!!!Encrypted text: 7Ԃ󿿕L&gt;ሷⷻแ႓*;&gt;&gt;&gt;Encrypt time is: 9msDecrypted text: Hello World! I love ParaProgramming!!!Encrypt time is: 32144ms 我们看到加密用时9毫秒，解密用时32144毫秒。解密用时是4线程的60%左右。发现提高一倍的线程数已经不能带来一倍的性能提升了。主要是因为开辟线程也需要消耗一定的系统资源。 下面是串行化的RSA加解密程序运行结果： 12345678Hello World! I love ParaProgramming!!!public key: 17113, 292906609private key: 278038877, 292906609Original text: Hello World! I love ParaProgramming!!!Encrypted text: 7Ԃ󿿕L&gt;ሷⷻแ႓*;&gt;&gt;&gt;Encrypt time is: 11msDecrypted text: Hello World! I love ParaProgramming!!!Encrypt time is: 201321ms 可以看到解密耗时201321ms，是采用2线程并行化的2倍。充分说明了并行化能显著的提升该算法的效率。 串并行模式 串行 2线程 4线程 8线程 时间（毫秒） 201321 100680 53791 32144 3. 分组实验 我分配到的算法分别是17-1包含问题，20-1雅可比迭代，21-4求一般矩阵全部特征值的QR方法。 MPI + OpenMP雅可比迭代雅可比迭代的MPI+OMP混合编程代码： 12345678910111213141516171819202122232425262728293031323334353637void Compute()&#123; time1=MPI_Wtime(); /* computing start */ while (max&gt;E) /* The precision requirement */ &#123; lmax=0.0; for(i=0;i&lt;m;i++) &#123; if(my_rank*m+i&lt;size) &#123; sum=0.0; #pragma omp parallel for reduction( + :sum) for(j=0;j&lt;size;j++) if (j!=(my_rank*m+i)) sum=sum+a(i,j)*v(j); /* computes the new elements */ v1(i)=(b(i) - sum)/a(i,my_rank * m + i); if (fabs(v1(i)-v(i))&gt;lmax) lmax=fabs(v1(i)-v(my_rank * m + i)); &#125; &#125; /*Find the max element in the vector*/ MPI_Allreduce(&amp;lmax,&amp;max,1,MPI_FLOAT,MPI_MAX,MPI_COMM_WORLD); /*Gather all the elements of the vector from all nodes*/ MPI_Allgather(v1,m,MPI_FLOAT,v,m,MPI_FLOAT,MPI_COMM_WORLD); loop++; &#125; /* while */ time2=MPI_Wtime();&#125; 注意到在计算中有for循环求和，因此考虑使用OMP中的reduction子句。 1#pragma omp parallel for reduction( + :sum) 将for循环任务分配到各个线程中去，等计算结束之后将结果sum规约至主线程的sum中，完成并行计算。 下面是该算法的MPI实现的输出（4处理器）： 12345678910111213141516171819Input of file "dataIn.txt"4 59.000000 -1.000000 -1.000000 1.000000 7.0000000.000000 7.000000 -2.000000 0.000000 5.000000-3.000000 -1.000000 3.000000 -1.000000 -1.0000001.000000 1.000000 1.000000 9.000000 3.0000000.000000 0.000000 1.000000 0.000000 Output of solutionx[0] = 0.999969x[1] = 0.999960x[2] = 0.999932x[3] = 0.000031Iteration num = 14Whole running time = 0.058200 secondsDistribute data time = 0.000059 secondsParallel compute time = 0.058141 seconds 下面是该算法的MPI+OMP实现的输出（4处理器+4线程）： 12345678910111213141516171819Input of file "dataIn.txt"4 59.000000 -1.000000 -1.000000 1.000000 7.0000000.000000 7.000000 -2.000000 0.000000 5.000000-3.000000 -1.000000 3.000000 -1.000000 -1.0000001.000000 1.000000 1.000000 9.000000 3.0000000.000000 0.000000 1.000000 0.000000 Output of solutionx[0] = 0.999969x[1] = 0.999960x[2] = 0.999932x[3] = 0.000031Iteration num = 14Whole running time = 0.000613 secondsDistribute data time = 0.000062 secondsParallel compute time = 0.000551 seconds 可以看到整体时间缩小了100倍左右，其中都是在并行部分减少的。 经过对相同数据的测试，得到了如下的表： 处理器数/线程数 0 2 4 8 1 0.000014 0.000190 0.000248 0.000348 2 0.000499 0.000274 0.000259 0.005836 3 0.000086 0.000218 0.000519 0.000320 4 0.000316 0.000193 0.000592 0.109583 可以看到在数据量小的情况下，增加MPI处理器数或者增加OMP线程数反而会拉低效率，因为系统开辟线程和通信也需要消耗，这一部分开销在数据量小的时候显的格外重要。 因为找到一个较大的有解的线性方程组是比较困难的，因此没有测试该算法对较大的矩阵的效率 包含问题包含问题的MPI+OMP混合编程代码如下: 12345#pragma omp parallel for reduction( + :mys) private(i) for(i=0;i&lt;n/group_size+1;i++) &#123; mys+=cal_inter(my_rank,i,x,y); &#125; 和雅可比算法类似，也使用了reduction规约处理。 MPI实验求解一般矩阵全部特征值的QR方法利用书中给的Demo，运行时会出现错误，而且选不同的处理器数量时程序结果也有区别。 下面是计算100阶矩阵的特征值的时间结果（1个处理器）： 1234Iteration num = 1000Whole running time = 58.251767 secondsDistribute data time = 0.017656 secondsParallel compute time = 58.234111 seconds 下面是计算3阶矩阵特征值的结果（3个处理器，用4个处理器得不出正确的结果）： 1234567Iteration num = 15Whole running time = 0.001306 secondsDistribute data time = 0.000645 secondsParallel compute time = 0.000662 secondsthe envalue is7.074672 -3.187883 -0.886791 以下是报错信息，每次计算结束后都会有该错误提示，无论结果计算是否正确。 12345678910==================================================================================== BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES= PID 23345 RUNNING AT node1= EXIT CODE: 11= CLEANING UP REMAINING PROCESSES= YOU CAN IGNORE THE BELOW CLEANUP MESSAGES===================================================================================YOUR APPLICATION TERMINATED WITH THE EXIT STRING: Segmentation fault (signal 11)This typically refers to a problem with your application.Please see the FAQ page for debugging suggestions]]></content>
      <tags>
        <tag>MPI</tag>
        <tag>OpenMP</tag>
        <tag>Parallel programming</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown的介绍]]></title>
    <url>%2F2018%2F12%2F24%2Fmarkdown%E7%9A%84%E4%BB%8B%E7%BB%8D%2F</url>
    <content type="text"><![CDATA[关于Markdown语法的介绍。 使用Markdown给你带来沉浸式写作体验Markdown是什么Markdown是目前互联网上最流行的写作语言，它使用一些简单的符号（* / ` &gt; [] () #）来标记文本，使文本具有一定的格式。 维基百科中对Markdown的描述如下： Markdown是一种轻量级标记语言，创始人为约翰·格鲁伯。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML（或者HTML）文档”。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。 由于Markdown的轻量化，易读易写特性，并且对于图片，图表，数学式都有支援，目前许多网站都广泛使用Markdown来撰写说明文件或是用于论坛上发表讯息。例如：GitHub，reddit， Diaspora，Stack Exchange，OpenStreetMap，Source Forge等。甚至Markdown能被使用来撰写电子书。 Markdown的优势 易写 Markdown语法十分简单，常用的标记符号不超过十个。用于日常写作记录绰绰有余。但这十个不到的标记符号，却能让人优雅地沉浸式写作，专注内容而不纠结排版，像写代码一样写文档，大大提高书写效率。 易读 「什么人都能打开」 所谓「什么人都能打开」是指Markdown属于纯文本，可以用任何的文本编辑器打开编辑。避免了有时候无法打开Word或者Pages等情况的发生。Markdown文本也可以轻松的转换成PDF，HTML等格式。 「排版样式不变」 所谓「排版样式不变」是指在转化为富文本或HTML等格式后，依然可以保留原文的排版不变。避免了Word有时候会发生版本不一致导致的排版不一致的情况发生。 沉浸式书写 与Latex类似，可以在书写时专注于书写的内容而不必担心格式的问题，避免打乱书写思路。 排版美观且可以自定义 默认排版已经比较优雅和美观。如果不满意也可以自行修改配置文件来达到期望的排版，灵活性强。 支持软件丰富 不管是Windows或者Mac系统，甚至网页，iOS和Android都有支持Markdown的软件。支持Markdown语法的笔记类工具也非常多，例如为知笔记，网易云笔记和印象笔记等。 Markdown不是为了取代Word，也不能够取代Word。但是可以为用户提供一个沉浸式的，不受格式困扰的写作环境。在有些情况下是非常高效的。 Markdown的适用场景 日记书写，快速排版编辑 程序员 做课堂笔记 TODO List … Markdown的语法介绍标题Markdown支持6种级别的标题 123456# h1## h2### h3#### h4##### h5###### h6 对应的效果如下： h1h2h3h4h5h6 段落及区块引用使用Markdown分段只需要将需要分段的内容前后保留至少一个空行即可。 Markdown提供了一个特殊符号&gt;用于块引用 1&gt; 这段文字是引用 这段文字是引用 插入链接，脚注和图片Markdown针对链接和图片的处理也很简单，使用如下语法进行标记 12[点击跳转到Bing](https://cn.bing.com/)![美丽的风景](C:\Users\kingn\Desktop\研一课程\文献管理\1.jpg) 点击跳转到Bing 可以看到超链接和图片的唯一区别就是在前面多了一个感叹号。图片地址可以是一个本地的地址，也可以是网络上的地址。 使用[^keyword]来表示脚注 12这是一个脚注[^f1]的样例。这是另一个脚注[^f2]的样例。 这是一个脚注[^f1]的样例。这是另一个脚注[^f2]的样例。 列表Markdown支持有序列表和无序列表两种形式 无序列表用*或+或-标识 有序列表用数字表示 1234567891011+ 雪碧+ 可乐- 雪碧- 可乐* 雪碧* 可乐1. 雪碧2. 可乐 以上标记效果如下 雪碧 可乐 雪碧 可乐 雪碧 可乐 雪碧 可乐 分割线有时候为了排版漂亮会加入分割线，可以用下面的方法加入 12---*** 强调有时候需要对某一部分内容进行强调或者用删除线划去。用一对或者_包裹的为斜体，用两对\或者_包裹的为强调，用~~包裹的为删除线。 1234567*这里是斜体*_这里也是斜体_**这里是加粗**__这里也是加粗__~~这里是删除~~ 这里是斜体这里也是斜体 这里是加粗这里也是加粗 这里是删除 插入代码及代码块Markdown可以轻松优雅的插入代码块。如果是行内引用，只需要用单个反引号包裹；如果是代码块，则使用两个以上反引号包裹。 12345678910这是一段`int a = b;`行内代码​```C#includ &lt;stdio.h&gt;int main()&#123; int a=0; print("%d", a);&#125;​ 12345678910这是一段`int a = b;`行内代码```C#includ &lt;stdio.h&gt;int main()&#123; int a=0; print("%d", a);&#125; Markdown会自动识别代码段中的语言并进行关键词高亮，你也可以在最上方的反引号后输入语言名称来指定关键词高亮方式。 插入表格123表头|条目一|条目二:---:|:---:|:---:项目|项目一|项目二 以上代码产生了如下的表格 表头 条目一 条目二 项目 项目一 项目二 三个短斜杠左右的冒号用于控制对齐方式，只放置左边冒号表示文字居左，只放置右边冒号表示文字居右，如果两边都放置冒号表示文字居中。 特殊符号处理如果需要输入Markdown保留的特殊符号，则需要用转义字符反斜杠\将字符转义。主要有以下几种符号需要转义 123456789101112\ 反斜线` 反引号* 星号_ 底线&#123;&#125; 花括号[] 方括号() 括弧# 井字号+ 加号- 减号. 英文句点! 惊叹号 注：在内容中输入以上特殊符号的时候一定要注意转义，否则将导致内容显示不全，甚至排版混乱。 TODO List123456- [ ] 大项目 - [ ] 首先 - [x] 然后 - [ ] 最后- [x] 另一项大项目 [ ] 大项目 [ ] 首先 [x] 然后 [ ] 最后 [x] 另一项大项目 目录在需要插入目录的地方输入[TOC]，会自动根据输入的标题级别创建目录。 这个目录是自动更新的。 [TOC] 流程图流程图的创建使用flow语法。 12345678910​```flowst=&gt;start: Starte=&gt;end: Endop=&gt;operation: My Operationcond=&gt;condition:Yes or No?st-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op​ 12345678910```flowst=&gt;start: Starte=&gt;end: Endop=&gt;operation: My Operationcond=&gt;condition: Yes or No?st-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op 使用起来也比较简单，分为两部分，上半部分是创建元素的过程，下半部分为定义元素的走向。 除此之外，还可以使用Mermaid来创建流程图，状态图，时序图和甘特图等。具体使用还需要参照Mermaid的语法来进行。需要注意的是不是所有的Markdown编辑器都支持Mermaid语法。 公式Markdown支持LaTeX公式，符合LxTeX语法的公式可以直接嵌入在Markdown文本中。与嵌入代码类似，公式也分为行内公式和公式块。行内公式用\$包裹起来，公式块用\$\$包裹。 123456质能方程：$E=mc^2$，这个方程展示了行内公式。下面展示了公式块。$$f(x_1,x_2,\idots ,x_n)=x_1^2+x_2^2+\cdots +x_n^2$$ 质能方程：$E=mc^2$，这个方程展示了行内公式。 下面展示了公式块。$$f(x_1,x_2,\dots ,x_n)=x_1^2+x_2^2+\cdots +x_n^2$$ HTML支持Markdown中支持html语句的直接嵌入。如果熟悉html的话，可以直接在编辑过程中使用html标签。 Markdown软件推荐 Windows Typora Visual Studio Code Cmd Markdown MacOs Ulysses Typora Mou 笔记软件 印象笔记 为知笔记 网易云笔记 简书]]></content>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux下手动安装Python3]]></title>
    <url>%2F2018%2F11%2F27%2F%E6%89%8B%E5%8A%A8%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85python%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[在某些情况下不能使用包管理软件直接安装Python，此时可以通过手动编译安装的方式成功安装 事先准备从Python的官网下载Python的Linux版本安装版，安装包以.tar或.xz结尾 将安装压缩包拷贝到需要安装的机器中 确保拥有该机器的管理员权限 操作首先对安装包进行解压缩 12xz -d Python-3.6.1.tar.xztar -xvf Python-3.6.1.tar 然后执行相应的配置文件 1./configure 然后执行用make进行编译 1make&#10;make install 最后用ln命令建立软链接即可实现直接输入python启动python环境 1ln -s /usr/local/bin/python3 /usr/bin/python]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Python3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python实现主机间全双工通信及文件发送]]></title>
    <url>%2F2018%2F11%2F27%2FPython%E5%85%A8%E5%8F%8C%E5%B7%A5%E9%80%9A%E4%BF%A1%2F</url>
    <content type="text"><![CDATA[本程序是信息网络与协议课程的一个作业。利用Socket编程和多线程技术实现了两个主机之间的IPv6通信和文件传输。 代码在ArchLinux系统下测试通过。 实现功能代码实现了主机间的全双工通信以及文件传输功能 原理通过开辟额外的线程执行socket通信中的recv()操作，避免了在一个线程中send()和recv()操作会相互阻塞的情况发生，实现了全双工的功能。 不足 由于是实验作业，所以没有完全考虑到输入合法性的问题。实际应用中应该完全考虑到过滤非法输入。 如果要实现多方通信或群聊等功能，最好还是独立出一个服务器。 异常退出时有时候没有关闭套接字。导致下次bind时发生错误。 如何从子线程中正常的关闭主线程还是一个待解决的问题。 代码及解释123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157#!/usr/bin/python# @Author : Wyf# @Time : 2018/11/25# @Function: ipv6 socket communicationimport socketimport threadingimport timeimport subprocessimport reimport osimport sysMAX_BUFF = 1024 # 最大缓冲区空间为1024字节DEFAULT_PORT = 32768 # 默认的服务器连接端口为32768isworkFlag = False # 是否继续工作标志位，用于退出时使用def main(): global isworkFlag print ("Time:", (time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()))) # 打印当前时间 try: host, port = input("Please enter target IP and Port: ").split() # 用户输入目标ip地址和端口号，如果不输入则默认为服务器端 flag = "ClientMode" # 如果没有捕捉到异常证明输入了内容，启动客户端 except ValueError: flag = "ServerMode" # 否则启动服务器 if flag == "ClientMode": # 以下为客户端进行操作 print_green ("ClientMode...") print ("Connecting to &#123;0&#125; port &#123;1&#125;".format(host, port)) try: client = socket.socket(socket.AF_INET6, socket.SOCK_STREAM, 0) # 创建IPv6套接字，TCP连接 except: print_red ("Fail to create socket...") exit(-1) try: client.connect((host, int(port))) # 连接到指定的主机 except: print_red ("Fail to connect to host...") exit(-2) print_green ("Connected successful, now you can chat !") isworkFlag = True # 连接成功，将标志位置为True t = threading.Thread(target= receiveMsg, args= (client, )) # 创建子线程，子线程执行receiveMsg函数，参数为套接字client t.setDaemon(True) # 设置该线程为守护线程，当主线程退出时该线程无条件退出 t.start() # 启动子线程，启动数据接收 while isworkFlag: # 以下为客户端输入，只要工作标志位为True就一直执行循环 msg = input() # 接收用户输入 client.send(msg.encode('utf-8')) # 将输入的str类型字符串转换为可供传输的byte类型 if msg == "END": # 如果输入的消息是‘END’，则将工作标志位置为False isworkFlag = False if msg == "FILE":# 如果输入的消息是‘FILE’，则调用sendFile函数进行文件传送 sendFile(client) client.close() # 退出时关闭套接字 print_red ("Connection Closed...") exit(0) elif flag == "ServerMode": # 进入服务器模式 host = str(getHostIpv6Addr()) # 获取本机的ipv6地址 port = DEFAULT_PORT # 采用设定好的端口 print_green ("ServerMode...") print_green ("Your IPV6 address is &#123;0&#125;, port is &#123;1&#125;".format(host, port)) try: server = socket.socket(socket.AF_INET6, socket.SOCK_STREAM, 0) # 服务器创建套接字 except: print_red ("Fail to create socket...") exit(-1) try: server.bind((host, port)) # 与本机指定的ipv6地址和端口进行绑定 except: print_red ("Fail to bind...") exit(-3) try: server.listen(5) # 监听套接字 print ("Waiting Connection...") except: print_red ("Fail to listen connection") exit(-4) clientsocket, clientaddr = server.accept() # 接收客户端的连接请求 print_green ("Connected. Target Ip is &#123;0&#125;".format(clientaddr)) isworkFlag = True # 连接创建后将工作标志设定为True server.close() # 关闭服务端套接字，之后收发消息使用接收客户端连接创建的套接字 t = threading.Thread(target= receiveMsg, args= (clientsocket, )) # 创建子线程，执行receiveMsg函数，等待接收消息 t.setDaemon(True) # 设置线程为守护线程 t.start() # 启动线程 while isworkFlag: # 当工作标志为True时一直执行以下语句 msg = input() # 接收用户输入 clientsocket.send(msg.encode('utf-8')) # 将用户输入的str类型字符串转换为byte类型后发送 if msg == "END": # 如果收到‘END’后，则将标志位置为False isworkFlag = False if msg == "FILE":# 如果收到‘FILE’后，则执行sendFile函数，启动文件传输 sendFile(clientsocket) clientsocket.close() #关闭套接字 server.close() print_red ("Connection Closed...") exit(0) else: print ("Wrong input") exit()def receiveMsg(s): global isworkFlag # 工作标志位为全局变量 while isworkFlag: # 当工作标志位为False时退出 msg = s.recv(MAX_BUFF) # 接收数据，缓冲区为设置的大小 print_green (msg.decode('utf-8')) # 显示消息 if msg.decode('utf-8') == 'END': # 如果接收到的消息为‘END’，则将标志位设置为False，关闭套接字，关闭程序 isworkFlag = False s.close() print_red ("Connection Closed...") os._exit(0) if msg.decode('utf-8') == 'FILE': # 如果接收到的消息为‘FILE’，则证明需要接收文件 data = s.recv(MAX_BUFF) # 接收文件内容前首先接收文件名和文件大小的信息 filename, filesize = data.decode('utf-8').split('|') # 分离文件名和文件大小 filepath = os.path.join(os.path.dirname(os.path.abspath(__file__)), filename) # 将文件路径指定为当前目录 filesize = int(filesize) # 转为int类型 has_sent = 0 # 已经接受的数据大小 with open(filepath, 'wb') as fp: # 在当前目录创建同名文件并打开 while has_sent != filesize: # 如果没有接受完数据 data = s.recv(MAX_BUFF) # 接收文件内容 fp.write(data) # 将数据写入文件 has_sent = has_sent + len(data) # 更改已接受的数据大小 print ('\r' + '[Saving]:%s%.02f%%' % ('&gt;' * int((has_sent / filesize) * 50), float(has_sent / filesize) * 100), end='') # 显示进度条 print("\n%s is saved." % filename) # 接收完毕后提示def getHostIpv6Addr(): # Only works in Linux getIPV6_process = subprocess.Popen(["cat", "/proc/net/if_inet6"], stdout = subprocess.PIPE) # 相当于在系统中执行cat /proc/net/if_inet6 而ipv6地址存放在该文件中 output = getIPV6_process.stdout.read() # 读出返回数据 ipv6_pattern = '(2001+[a-f0-9]&#123;28&#125;)' # match IPV6 address 匹配global ipv6地址的正则表达式 m = re.search(ipv6_pattern, output.decode('utf-8')) # 在输出的内容中匹配符合条件的字符串，即为ipv6地址 ori_ipv6 = m.group() # 取出该地址 # 标准化该地址，添加: aft_ipv6 = ori_ipv6[0:4] + ':' + ori_ipv6[4:8] + ':' + ori_ipv6[8:12] + ':' + ori_ipv6[12:16] +':' +ori_ipv6[16:20] + ':' + ori_ipv6[20:24] + ':' + ori_ipv6[24:28] + ':' + ori_ipv6[28:32] return aft_ipv6def sendFile(s): # 传送文件的函数 filepath = input("Input File Path: ").strip() # 用户输入路径，去掉输入的空格 filename = os.path.basename(filepath) # 获取文件名 filesize = os.stat(filepath).st_size # 获取文件大小 字节数 fileinfo = "%s|%s" % (filename, filesize) # 将文件信息整合为 &#123;文件名|文件大小&#125; 的形式发送给接收端 s.send(fileinfo.encode('utf-8')) # 发送文件信息 has_sent = 0 # 已发送的大小 with open(filepath, 'rb') as fp: # 打开文件 while has_sent != filesize: # 如果没有发送完 data = fp.read(MAX_BUFF) # 读取文件 最大1024字节 s.sendall(data) # 发送全部数据 其实此处使用send函数也是一样的 因为已经限定了data的大小最大为1024个字节 远小于MTU has_sent = has_sent + len(data) # 更改已发送的数据大小 print ('\r' + '[Sending]:%s%.02f%%' % ('&gt;' * int((has_sent / filesize) * 50), float(has_sent / filesize) * 100), end='') print("\n%s is sent to other" % filename)def print_red(s): # 终端中显示红色字 fuck = '\033[31m' + s + '\033[0m' print (fuck)def print_green(s): # 终端中显示绿色字 fuck = '\033[32m' + s + '\033[0m' print (fuck)if __name__=="__main__": main()]]></content>
      <tags>
        <tag>Python</tag>
        <tag>通信</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2016年考研党加油！]]></title>
    <url>%2F2016%2F10%2F05%2F2016%E5%B9%B4%E8%80%83%E7%A0%94%E5%8A%A0%E6%B2%B9%2F</url>
    <content type="text"><![CDATA[就是试试我还会不会用这个blog2018年6月27日世界的本质就是复读机 所有的考研党都加油，都能去自己想去的学校！加油。]]></content>
      <tags>
        <tag>闲聊</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[改革派]]></title>
    <url>%2F2015%2F12%2F22%2FHYB%2F</url>
    <content type="text"><![CDATA[偶然从知乎日报上读到的一篇文章。正好最近正在看《邓小平时代》，觉得写的不错，转载来收藏。原文作者：维诺，记者，评论人 “他们现在，就是要把胡耀邦说成CPC的耀邦，但人们纪念耀邦，是因为他是人民的耀邦。”2015年11月19日，在the Central Committee of CPC召开胡耀邦百年诞辰座谈会的前一天，吴伟对我说。62岁的吴伟曾任the Central Committee of CPC政治体制改革研究室处长和研究员，参与起草80年代政改总体设想，担任原the Central Committee of CPC的政改研讨小组办公室主任BaoTong的秘书。他于1989年因Tiananmen事件而被审查。“官方纪念胡耀邦的出发点，是把胡耀邦作为一种执政党所余不多的正资产，他们希望将这个被冷落的正资产盘活，并且让它增值。纪念胡耀邦的主题，就是把胡耀邦的一生，归结为Party的耀邦，把他在改革开放以后，所做的绝大多数事情，都说成是从Party的利益出发。”吴伟的这一论断在第二天，得到了来自最高层的印证。 1 是党的耀邦，不是你的耀邦官方越纪念胡耀邦，胡耀邦生前所推行的党内民主改革、防止个人崇拜专断，越发远去。2015年11月20日，作为执政党的CPC举行了胡耀邦百年诞辰纪念座谈会，几乎同时，《胡耀邦文选》出版，《胡耀邦》电视纪录片上映。胡耀邦曾于1980年至1987年担任总书记 of the Central Committee of CPC，由于其在任期间，积极推动政治与经济改革，推行“废除领导职务终身制”，对student movements保持宽容，因此在1987年1月连续七天的“党内生活会”中，被党内保守派“逼宫”下台。1989年，因为胡耀邦的突然逝世，学生大规模自发悼念并提出政治民主等要求，由此引发了震惊中外的“535事件”——也因此，胡耀邦在其身后多年，一直都是CPC的“心结”所在。表面上，本次高规格纪念座谈会，the Central Committee of CPC给这位曾经的名义最高领袖“平反”了。但处理方式值得玩味，对于胡曾经完全不合程序地被党内老人“逼宫”下台，以及遭到的“反资产阶级自由化不力”的指控，执政党则似乎全然不知，更不用说因其去世而引发的student movements了。对比胡耀邦诞辰90周年上，彼时国家副主席曾庆红与今年president的讲话，会发现显著的不同。在2005年的纪念谈话中，曾庆红赞扬胡耀邦“探索党和国家领导体制的改革”，到100年时的更高规格座谈会时，president则只字不提。2005年曾庆红称赞他“为加强和改善党的领导做了大量工作”，這一点在2015年也大量简化，其中胡耀邦“反对个人崇拜”、“完善党内民主”的表述，已不复存在。近年来，党内民主人士与党外改革人士常借胡耀邦来纪念80年代中国的锐意改革，并寄望未完成的民主政治改革可以早日重启。但这显然不是今天执政党纪念胡耀邦的意思。在纪念胡耀邦诞辰100周年时，president的讲话中专门添加了胡耀邦对共产主义和马克思主义的坚守：“那种认为‘communism是渺茫的幻想’、‘communism没有经过实践检验’的观点，是完全错误的。”但对胡耀邦如何理解马克思主义，如何推动民主政治改革，则视而不见。如吴伟所说，president正在将胡耀邦作为CPC的政治资源盘活——“盘活”CPC历史中原本冲突矛盾、难以自圆其说的地方，求取最大公约数，为我所用，从而重建正当性，也成了CPC斯巴达大会以来鲜明的执政特色。于是纪念邓小平110周年诞辰时，president将“坚守communism信仰”描述为邓的首要美德；纪念被认为是保守派的陈云110周年诞辰，president又称陈云积极支持邓小平的改革开放。太祖时代与邓小平时代如何打通？一句“前后两个三十年互不否定”就解决了问题。这一场“高规格“的、早在2015年初，就让党内党外的民主改革人士怀有期待的座谈会，不仅没有带来丝毫希望，反而让人更加错愕。他们目睹了如此吊诡的场景——官方越纪念胡耀邦，胡耀邦生前所推行的党内民主改革、防止个人崇拜专断，就越发远去。而与此同时，胡耀邦本人，与追随他遗志的改革人士一样，也陷入了前所未有的尴尬与失落。 2 尴尬的党内民主人士，微弱的抵抗仅仅3年时间，改革“派”就几乎彻底“退场”。整个2015年，对于political reform还怀有期待的人士，都把纪念胡耀邦看成一个或许象征最后希望的政治风向标。由于拿不准政治尺度，不知道官方会如何纪念，诸多媒体仍然战战兢兢。而临近胡耀邦百年诞辰时，大部分国内媒体接到propaganda department的通知：在专题文章上，市场化媒体不能有自选动作，也就是说，只能转载官方媒体统一报道。 只有少数媒体坚持了安全线以内的“自选动作”。写作纪念文章的人，多是党内主张民主改革的学者。《财经》杂志刊发了中央社会主义学院政治学教授王占阳的文章《胡耀邦的富民思想》。王占阳被视为党内民主派学者的代表人物。一直以来，他提倡“普世的宪政社会主义”，在他的论述中，有“两面大旗”，一面是马克思，一面是邓小平。他把马克思解释为“主张宪政民主政体”，把邓小平解释为“主张社会主义市场经济”。在此前与胡耀邦之子胡德平共同出席的座谈会中，他也曾提出CPC是“长期执政，完成执政使命”，而非“永远执政”。以此种方式要求党内改革的声音，曾在2012年斯巴达换届之际频繁出现。但很显然，新一届领导人完全拒绝了这一呼吁——要求CPC自我改革的强烈声音，在这两年来已近乎绝迹。一直被视为党内民主派老人的发言阵地《炎黄春秋》，此次也刊发了与官方定调截然不同的纪念声音。原Centre Committee of CPC办公厅调研室正局级研究员郝怀明发表文章《胡耀邦与Party的现代化》，文章提到胡耀邦反对在任何事上与中央保持一致的观点，而应该发扬民主。中央党校党史部教授王海光也在《炎黃春秋》杂志发表文章，其中引用1980年胡耀邦参与起草的《关于党内政治生活的若干准则》，并发出质问：“反对个人专断，发扬党内民主，这35年来究竟落实了多少？是不是颇有‘好了伤疤忘了疼’的感慨？”“好了伤疤忘了疼”显然意有所指，中共刚刚在几周前通过了新版的《党纪处分条例》，其中要求党员不得“妄议中央大政方针，破坏党的集中统一”，违反者将被给与警告，撤销职务，甚至开除党籍的处分。财新网发表了中央党校教授蔡霞的文章《胡耀邦——推动全面改革的政治家》，蔡霞将胡耀邦的形象重新置位，其中详细论述胡耀邦致力于“推动解放思想、发扬理论民主、纠正党内左的组织路线、加强民主法治建设、推动政治改革……”这与president只字不提、甚至截然相反的论述相互龃龉，所以甫一发出，即被删除。由与胡耀邦家族关系密切，长期从事胡耀邦研究的李盛平所主持的胡耀邦史料信息网，成为纪念胡耀邦、并且呼吁中国共产党政治改革的最后一块阵地。但显然，胡家人对president的纪念讲话相当不满，因此在胡耀邦史料信息网的首页头条，放置的仍然是ZY真人的讲话（追悼会）、曾庆红的讲话（90周年），而现任president的讲话——或许是作为无声的抗议，则不见踪影。采访中，一位党史学者对我说，“两年来发生的种种大行其道的极左言论，为什么在上一任的时代是没有的？你能说这和当今最高领导人的主张是没有关系的吗？”在2012年，十八大中共换届之时，学者荣剑曾预言，八十年代的改革派，很可能随着president的上台而“返场”与“登场”了。但事实情况却是，仅仅3年时间，改革“派”就几乎彻底“退场”。总之，在“不讲宪政”、“不讲普世价值”、“不讲公民社会”的官方主张占据舆论场，同时也是官方大规模纪念胡耀邦诞辰百年的今天，这零星的四五篇文章，便是体制内改革派最后的微弱集结了。 3 曾经集体亮相的党内民主“派”2009年是自1989年以后，党内民主人士最接近“派别”气象的一次集体亮相。对比胡耀邦百年诞辰官方的大规模纪念，党内民主人士的自发纪念与软弱“抵抗”，当然太过吉光片羽，微不足道。然而六年前，在2009年胡耀邦逝世20周年之际，党内民主人士曾有大规模的纪念活动，甚至被民间视为一次“党内民主派”的集体亮相。彼时，在前中宣部长朱厚泽的支持下，自由主义学者张博树等人策划了《胡耀邦与中国政治改革：12位老CPC人的反思》一书在香港出版，以此纪念胡耀邦逝世及Tiananmen运动20周年。众多赫赫有名的党内民主人士——李锐、胡绩伟、谢韬、何方、辛子陵、张显扬、杜光、钟沛璋、林京耀、宋以敏、王家典、周成启等12位老CPC人，都各写一篇要求CPC推动political reform的文章，港媒和外媒均跟进报道，一时引发海内外剧烈反响。不止于此，同年，李锐、朱厚泽、杜导正、曾彦修、张思之等党内民主人士在香港《争鸣》杂志发表给时任国家主席胡锦涛并members of the Standing Committee of the Political Bureau的公开信，要求扩大舆论监督、保障公民社会，进行political reform。这被媒体称为“零九上书”，一些人士甚至认为，“零九上书”与dissidents 刘XB所组织的“08 charter”相映照，成为党内党外合力推动民主的写照。事实上，CPC党内民主人士从未形成真正意义上的“派别”。在采访中，当我称一位中央党校教授为“党内民主派”的时候，他明确拒绝这个称号，因为“从来就没什么派”——而2009年，则是自1989年以后，党内民主人士最接近“派别”气象的一次集体亮相。党内民主“派”在CPC斯巴达大会前一度相当活跃，他们曾被视为推动中国民主转型的重要力量。除了09年的“集体亮相”，这些党内民主人士以个人之声，多在《炎黄春秋》发表自己对时局的见解，以及对political reform的大声疾呼。前社科院副院长谢韬于2007年在《炎黄春秋》杂志直言不讳——发表文章《只有民主社会主义才能救中国》，他认为“政治体制改革再也不能拖延了”，因为“企图保留毛模式的政治体制，只在经济上改革开放，会重蹈蒋介石国民党在大陆走向灭亡的官僚资本主义道路”，“只有民主宪政才能从根本上解决执政党贪污腐败问题。”然而天不假年，他于2010年逝世。曾任毛秘书的耄耋老人李锐，现在仍然担任《炎黄春秋》顾问，他在2009年胡耀邦逝世20周年之际，发表文章《不当奴隶，更不当奴才》——其中已经直白无遗地提出，如果要完成胡耀邦的遗愿，不能再走one-party system的老路，“首先开放言论自由、实行舆论监督……必须当政分开，政企分开，依法治国，实施宪政。”更为悲观的是同样已经逝世的前中宣部长朱厚泽，他与胡耀邦关系深厚，被视为CPC党内民主“派”的灵魂人物。晚年朱厚泽对“中国模式”嗤之以鼻，直言中国的政治despotism、经济发展模式，很可能给本国和世界造成灾难后果。然而这般呼吁民主的“盛况”，不再可能出现在今天。 4 被收编的言论阵地《炎黄春秋》被收编后，预计在香港出版的《转型中国》杂志被叫停。除了09年的集体亮相，如果说党内民主人士有常规的组织化力量，《炎黄春秋》杂志则堪当此任。它是能够集结党内民主人士和党外liberalism倾向学者的重要阵地，也像是一枚信号器——如果它骤然衰败，则必定是不祥信号。而2014年，发生在《炎黄春秋》的动荡，很可能标志着CPC党内民主“派”的断崖式失语。2014年9月，国家新闻出版广电总局发出通知，要求《炎黄春秋》的主管单位由原来的中华炎黄文化研究会更改为文化部下属的中国艺术研究院——这一明显的收编举动，试图强行“管住”《炎黄春秋》，迅速引发了《炎黄春秋》的内部动荡。知情人士告诉我，总编辑吴思和执行主编洪振快都反对这一收编行为。而杂志社内部在此次决议中，社长杜导正——这位党内民主人士——亲自违背了他定下的“议事三原则”，亦即炎黄春秋内部的民主议事规程——最终导致总编辑吴思与执行主编洪振快愤而辞职。相关人士告诉我，《炎黄春秋》近来言论空间急剧收窄，以前相对的大胆言论，已几乎不再可能出现。与此同时，“守纪律”、“讲规矩”是十八大以来CPC对party member的最新要求，而最近颁布的新版《中国共产党纪律处分条例》，则直接发展成为party member“不得妄议中央大政方针”——在此背景下，断崖式失语，自是党内民主“派”的必然结局。鲜为人知的是，从《炎黄春秋》辞职的核心编辑并非束手就擒，他们曾试图在香港打开一块言论空间。多次访谈中，知情人士告诉我，曾经以“皇甫平”为笔名与保守派笔战、在90年代初期撰文为中国改革开放鼓呼的周瑞金，在《炎黄春秋》被收编事件发生后不久，找上了从该杂志辞职的吴思与洪振快，希望在香港办一本杂志，名为《转型中国》。周瑞金是浙江人，在浙江商人中影响广泛，因此得到了一位浙商约一年三百万的资金资助。《转型中国》本来预计在2015年5到6月出版创刊号，第一期就是吴思、王占阳、任剑涛、尹宝云、马立诚、张木生等党内民主“派”的文章与演讲，共同就CPC混乱的意识形态转型，提出解决方案与出路——然而“来自相当高层的压力”，分别找到周瑞金与出资浙商，要求停办《转型中国》，否则“会有很严重的后果”——最终，这本杂志还未出生，便无声无息的死亡。如果说，在2013年官方的“反宪政”浪潮下，党内民主“派”还能够发起声势浩大的反攻；那么2014年，无疑是党内民主“派”近乎彻底销声匿迹的一年，这一衰败趋势，延续了整个2015年。也正因此，2015年在党内民主精神领袖胡耀邦的百年诞辰中，他们再也没办法像2009年那样，吹起集结号了。 5 改革“派”弥漫的悲观心绪如今相逢，彼此的悲观心绪，已难以掩盖。老一辈民主人士对于有生之年，能够看到一个良序的民主中国，大部分都感到极其悲观。党内民主“派”与党外渐进改革“派”，事实上是一枚硬币的两面，他们的主张趋同，而由于身份不同，话语策略有所差异——但其核心就是党内党外合力，无论是来自共识合作，还是来自民间倒逼。在斯巴达大会前后，党外的渐进民主主义者曾对现任最高领导人充满想象。他们追溯president父亲的改革历程，以及其父为胡耀邦的鸣冤不平，遵照这一脉络，期冀子承父愿，president能够推动中国走向民主转型。而三年过去，无论是否愿意承认，对于现任president的美好想象，已经一个接一个的落空。在北京党内外民主人士的交谈中，如今流传着对president另类的话语观察。“除了正式文件外，他所有的即席谈话，都是毛时代的一套言论，”我分别从北京的一位政治学者和一位党史学者处听到相同的结论。尽管president热衷于长串的书单，但愈发粗鄙的红色话语现象，从政治语象研究上也得到清晰印证。香港大学中国传媒研究计划主任钱钢长期研究中共政治语象，他认为，作为列宁主义政党，CPC重视宣传、迷恋口号、习惯动员，政治表述是政治发展的风向标，通过观察这些“关键”词汇的诞生、消长与衰亡，可以从中读出CPC政治的发展方向。CPC政治词汇可以用深蓝、浅蓝、浅红、深红来分类，深蓝是被CPC批判的强烈liberal词汇（如：multi-party system），浅蓝是官方不倡不禁的温和自由化词汇（如：公民社会、公民权利），浅红是官方的门面修饰用语（如：三个代表、科学发展观），而深红则是露骨的毛时代用词（如：刀把子、阶级斗争、无产阶级专政）。而与政治改革直接相关的词汇，钱钢以三组浅红词语（党内民主、民主政治、政治文明），三组浅蓝词语（宪政、公民社会、公民权利）做观察：从2014年以来，这三组原本为官方所用的浅红色词语被打入浅蓝，官方基本不再提及。原本可以出现在市场化媒体的浅蓝色词汇，则直接被打入深蓝禁区，媒体基本不得再使用。而深红词语，如“刀把子”、“阶级斗争”等毛时代的粗鄙词汇，则一个接一个的复活。政治变化也剧烈搅动人心。与诸多老一辈民主人士交谈，我感喟最多的，是三年未至，变化倏然。两年多前，他们普遍会倡导某种程度的渐进主义，亦或是“日拱一卒，不期速成”的良好愿望。许多耳顺之年的人士，会对自己在有生之年，看到一个拥有自由秩序的民主中国怀有信心——谨慎乐观，是彼时的普遍心理。而如今相逢，我们一旦谈论国事，彼此的悲观心绪，已难以掩盖。他们对于有生之年，能够看到一个良序的民主中国，大部分都感到极其悲观。一位中央党校教授对我表达了自己对中国未来的深度悲观：现在的高压状态无法永续，但由于中间阶层的社会力量被完全打压，良好民主不可能到来，“在未来，一场动荡失序不可避免。”他重点谈到的是对如今中国官僚集团“怠政”的观察，“party不把干部当人，而把干部当狗”，“升迁的时候不顾你的胡作非为、黑色收入，打击你的时候也没有任何人权可言”，“旧的激励机制没了，新的激励机制根本没有”——由于执政党不再能够完全控制和激励官僚体系，他认为，“中国经济发展的困境，与如今官员不敢作为有相当大的关系。”这一切让诸多人士怀疑，渐进主义一开始就不应该出现，因为那是“贩卖虚假希望”。然而，党内“中左”与党外“中右”合力推动转型的迹象，并非从未存在过——它曾引起过党内外呼吁民主的空前共鸣。 6 渐进主义破产了吗？渐进民主主义所依赖的合力与倒逼，条件看起来已经完全丧失：党内民主“派”偃旗息鼓，党外力量完全被打压，整个社会彻底散沙化，原子化的个人将直接面对国家机器。党内外合力推动改革的希望，最为振奋人心的是在2010年。是年8月20日到9月30日，时任国务院总理温家宝在不同场合，七次直接呼吁political system reform，一时间引起海内外巨大关注。香港大学中国传媒研究计划主任钱钢迅速整理出版了《政治改革大博弈——温家宝七谈political reform》一书，在该书中，他写道：“（温家宝七谈political reform）无疑是中国政治发展史的重要事件，有朝一日，political reform大戏揭幕，扣人心弦的演变一幕幕展开，人们将会越来越清楚的看到‘温家宝七谈political reform’之不寻常的意涵。”许多后来对渐进民主嗤之以鼻的党内外民主人士，在彼时都曾异口同声地声援“孤独”的温家宝。事实上，那时候除了余杰等少数一以贯之的激进反对人士以外，甚至因Tiananmen事件流亡海外的学者Hu Ping也因国务院总理的呼吁，而看到了某种渐进民主的希望。他甚至以535为例——“现在一般人都承认，胡、赵算得上民主派。但是我们不要忘记了，胡赵的民主派身份都是在他们下台之后才认出来的……（我们）对以赵紫阳、张爱萍、Bao Tong、闫明复、胡绩伟等为代表的CPC内愿意严守现代文明准则的力量，严重缺乏了解和缺乏信任。”“一个在位者，即便他是真正的改革派，也不可能毫无保留地讲出自己的理念，那么我们不妨反过来想，如果有这样的改革派，他能对外讲到什么程度。”然而，无论温家宝只是“影帝”，还是在党内孤掌难鸣，总之他“风雨无阻，至死方休”的推动政改，最终在其卸任之际，也没有任何实质进展。但无论如何，彼时一谈“改革”，其面相是“向前”的，而非近三年飞速回望毛时代的“全面深化改革”。它亦曾让整个社会为之一振，让党内外前所未有的共鸣激荡——而到如今，党内外合力的渐进民主，再难寻找些微端倪。在中国推动渐进民主，由党内“中左”（体制内社会民主主义人士）与党外“中右”（民间自由主义温和派）合力推动中国转型——这曾是four gentlemen of Tiananmen之一的Zhou Duo，所最先在中国倡导的良性民主转型方式（参见自由主义学者张博树《中国宪政改革可行性研究报告》），并且拥有关于渐进民主的一套完整论述。在他看来，按照这样的路径走向英美宪政模式，转型之路不至于彻底失序，造成剧烈动荡。一直以来，他主张达成精英共识，然后在精英竞争层面，将人大、政协转变为真正的议会，CPC从高居议会之上的“议会老子党”变为在宪法约束之下的议会党，走内源式的multi-party system发育之路。在大众竞争层面，他主张认真推行县市一级的民主选举与司法独立，扩大言论和出版自由。执政党内部则实行多元权力的监督制衡，将一切能让民间社会办到的事情，都让渡给民间社团……Zhou Duo的建言曾在十八大前被其红二代儿时好友送到政研室of the Central Committee，据香港《明报》报道，引起过高层关注。但三年过去，新任执政者几乎在每一条建言上，都做出了相反举措。单独是2013年General Office of the CPC Cenral Committee印发的《关于当前ideology领域情况的通报》，即“Seven不讲”的“9号文件”就告知了真相——不讲宪政、不讲普世价值、不讲公民社会、不讲新自由主义、不讲西方新闻观、历史虚无主义以及质疑改革开放。这份文件将渐进民主的主张全盘推翻，而这之后两年，则是变本加厉的南辕北辙。Zhou Duo也对我坦言，其对president观察失误，“曾经我以为他是’中左’，可以和LKQ这个‘中右’配合得很好，现在看来是高看他了。”这让渐进主义理论更显尴尬，这一套主张被官方极权主义与民间激进主义共同绞杀，一旦渐进的主张被官方毫不留情地打压之时，民间激进人士便会更加剧烈的嘲笑讽刺。他们被讥刺为“货与帝王家”、“替国务院操心”、“递折子”……如果超越任何道德评价，激进人士的嘲讽揭露了一个事实——渐进民主主义的主张已经完全不能解释如今的状况，其所依赖的合力与倒逼，条件看起来已经完全丧失：党内民主“派”偃旗息鼓，党外力量完全被打压，整个社会彻底散沙化，原子化的个人将直接面对国家机器。对其更为深刻的批评来自于政治学者王天成，这位“快速变革”主张者在其代表作品《大转型：中国民主化战略研究框架》一书中对“渐进主义”的理论缺陷直言不讳，称渐进主张“对民主转型的性质和过程缺乏基本认识”，是一种“想当然的设想”。因为渐进主义者无法回答——在如今的准极权控制时代，CPC如何会自愿的从凌驾于一切之上的“老子党”变成议会党？而人大政协如何能够转化为议会？后极权政体如何会转化为分权制衡的宪政体制？……针对这些问题，Zhou Duo都没有直接回答我。他仍然还坚持着想方设法“递折子”。必须承认，他的一点观察仍是对的——“在这个权力体制下，最高层不改，其他说什么都没用。”事实可能的确如此。在一个准极权体制下，既不存在渐进民主改革的可能，也同样不存在revolution的可能。“朝中没有袁世凯，在野没有孙中山”，是民主人士不得不面对的尴尬事实，而这也注定了中国社会未来的冰河时期。“中国的president正在带领中国第二次探底。毛泽东是第一次，这是第二次。”在访谈最后，一位中国社科院历史学者对我说。]]></content>
      <tags>
        <tag>政治</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C#学习笔记（二）]]></title>
    <url>%2F2015%2F11%2F15%2FC-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%2F</url>
    <content type="text"><![CDATA[还是面向对象的部分，下一部分就开始windows窗体编程了。 运算符重载用+-*/直接进行复数运算1234567891011121314151617181920212223242526272829303132333435363738class Complex&#123; //实部和虚部 public double a,b; //构造函数 public Complex(double real, double imgai) &#123; a = real; b = imagi; &#125; //重载+运算符 public static Complex operator +(Complex z1, Complex z2) &#123; return new Complex(z1.a + z2.a, z1.b + z2.b); &#125; //重载-运算符 public static Complex operator -(Complex z1, Complex z2) &#123; return new Complex(z1.a - z2.a, z1.b - z2.b); &#125; //重载*运算符 public static Complex operator *(Complex z1, Complex z2) &#123; Complex z = new Complex(0, 0); z.a = (z1.a * z2.a - z1.b * z2.b); z.b = (z1.b * z2.a + z1.a * z2.b); return z; &#125; //重载/运算符 public static Complex operator /(Complex z1, Complex z2) &#123; Complex z = new Complex(0, 0); double denominator = (z2.a * z2.a + z2.b * z2.b); z.a = (z1.a * z2.a + z1.b * z2.b)/denominator; z.b = (z1.b * z2.a - z1.a * z2.b)/denominator; return z; &#125;&#125; 这样就实现了对运算符的重载，当进行计算时，编译器先对运算符两端的数据类型进行比较，若为Complex对象则调用重载的函数进行计算，否则调用默认的计算方式。不必重载复合运算符（+=），只要重载了相应的普通运算符（+）即可以 索引索引可以让我们像数组那样访问类的数据成员123456789101112131415161718192021222324252627282930313233class Cube&#123; private double length, width, height; //省略构造函数 //... //索引 public double this[int index] &#123; get &#123; switch (index) &#123; case 0: return length; case 1: return width; case 2: return hright; default: throw new IndexOutOfRangeException("下标出界！"); &#125; &#125; set &#123; switch(index) &#123; case 0: length = value;break; case 1: width = value;break; case 2: height = value;break; default: throw new IndexOutOfRangeException("下标出界！"); &#125; &#125; &#125; &#125; 与属性相似，也用set和get两个访问器。索引的使用方法和数组完全一样。如果我们创建了一个名为box的Cube对象，就可以用box[0],box[1],box[2]分别表示length,width和height。索引的下标可以不是数，可以为double, string等类型12345678910111213141516171819202122232425public double this[string indexString] &#123; get &#123; switch (indexString) &#123; case "length": return length; case "width": return width; case "height": return hright; default: throw new IndexOutOfRangeException("下标出界！"); &#125; &#125; set &#123; switch(index) &#123; case "length": length = value;break; case "width": width = value;break; case "height": height = value;break; default: throw new IndexOutOfRangeException("下标出界！"); &#125; &#125; &#125; 声明数组对象1Cat[] cats = new Cat[5]; 和声明普通数组的方式相同。但以上语句只是声明了一组“引用符”而已，并没有创建对象，下面的语句让每个引用符指向一个对象1for (int i = 0;i &#60; cats.Length; i++)&#10;&#123;&#10; cats[i] = new Cat();&#10;&#125;]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[c#学习笔记（一）]]></title>
    <url>%2F2015%2F10%2F28%2FC-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[今天开始学习C# 尽量坚持下去！ keep fighting!这一部分是面向对象的部分 属性（Property）例子： 12345678910111213141516...public int Age&#123; get &#123; return age; &#125; set &#123; if(value &lt;= 0) age = 0; else age = value; &#125;&#125;... get 和 set 是两个访问器，get用来读取变量的值，set用来设置变量的值。其中set访问器中有一个隐式声明的变量value。使用： 12Kitty.Age = 3; //用属性Age为变量age赋值（使用set）Console.WriteLine(Kitty.Age); //用属性Age读取变量age的值（使用get） 构造函数每个类都有一个默认的与类同名的构造函数用来初始化对象的成员变量。当创建对象的时候，系统会调用默认的构造函数，用默认值初始化所有成员变量的值。（int-&gt;0 float-&gt;0.0 bool-&gt;false string-&gt;null） 构造函数必须和类同名，并且没有返回类型。我们还可以定义带参数的构造函数例子：1234567891011class Cat&#123; ... public Cat(string nameValue, int ageValue) &#123; //初始化变量 name = nameValue; age = ageValue; &#125; ...&#125; 调用以上的构造函数1Cat kitty = new Cat("kitty", 3);//将对象kitty的name和age分别初始化为kitty和3 当自定义了构造函数后，默认的无参数构造函数就失效了，如果需要的话必须显示定义。123456789101112131415161718class Cat&#123; //无参数的构造函数 public Cat() &#123; name = kitty; age = 3; &#125; ... //有参数的构造函数 public Cat(string nameValue, int ageValue) &#123; //初始化变量 name = nameValue; age = ageValue; &#125; ...&#125; 析构函数析构函数也与类同名，只是要在函数名前加~。该函数不带任何参数，也没有返回值。用来销毁对象，释放对象所占用的内存空间。1234567891011121314151617class Cat&#123; ... //构造函数 public Cat(string nameValue, int ageValue) &#123; //初始化变量 name = nameValue; age = ageValue; &#125; ... //析构函数 ~Cat() &#123; //code可以做一些在销毁对象时需要做的 &#125;&#125; 除非必要，一般不需要编写析构函数，也不用向析构函数里添加代码。 静态成员静态变量用来描述整个类，所有的实例化对象都可以使用，且共用内存数据1public static int aaa = 0; 实例变量通过对象名引用，静态变量通过类名引用。例：Math类的大部分成员均为静态变量 静态函数某些情况下需要类名直接调用函数。下面编写一个Calculate类，它的静态函数可以用来计算两个实数的和，差，积。123456789101112131415161718192021222324class Calculate&#123; public static double Add(double x, double y) &#123; return x + y; &#125; public static double Sub(double x, doulbe y) &#123; return x - y; &#125; public static double Multi(double x, double y) &#123; return x * y; &#125;&#125;static void Main(string[] args)&#123; double a = 123456; double b = 456789; //调用静态函数，通关类名直接调用 double sun = Calculate.Add(a,b); double dif = Calculate.Sub(a,b); double pro = Calculate.Multi(a,b);&#125; 常量成员const常量在类中建立const常量的方法和函数中基本一样1public const double PI = 3.1415926; const只能在声明的时候初始化，不能在其他地方赋值，在运行过程中它的值保持不变。类的const常量是隐式静态的，为该类的所有实例化对象共有。所以在类外要通过类名来引用变量。 readonly常量在类的具体对象中是固定的常数，但在不同的对象中数值可能不同。1public readonly int roomNumber; 重载（Overload）可以在一个类中定义多个名称相同但参数不同的函数，这称为函数的重载。函数重载的调用原则是参数“最佳匹配”，即系统调用参数类型最匹配的那个函数。例子：123456789101112131415161718192021class Calcuate&#123; static public int Divide(int x, int y) &#123; return x / y; &#125; static public double Divide(double x, double y) &#123; return x / y; &#125;&#125;static void Main(string[] args)&#123; int a = 7; int b = 3; double c = 7.0; double d = 3.0; //调用不同的函数来执行。 int ans1 = Calculate.Divide(a ,b); double ans2 = Calculate.Divide(c ,d);&#125;]]></content>
      <tags>
        <tag>C#</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ip网关登陆python版]]></title>
    <url>%2F2015%2F10%2F24%2Fip%E7%BD%91%E5%85%B3%E7%99%BB%E9%99%86python%E7%89%88%2F</url>
    <content type="text"><![CDATA[一个简单的python小程序用来登陆东北大学ip控制网关 1.抓取数据包用wireshark抓取网页版网关登陆过程中的数据包，配合IE开发者工具，可以看到提交给服务器端的数据包内容由以下几部分构成。 postData = { &apos;uid&apos;:&apos;&apos;, &apos;password&apos;:&apos;&apos;, &apos;range&apos;: &apos;&apos;, &apos;operation&apos;: &apos;&apos;, &apos;timeout&apos;: &apos;&apos;, } 其中uid为用户名，password为密码，range为登陆范围（在2015年6月30日之后学校取消了国内和国际的区别，故此项无意义。但仍需提交给服务器。），operation为操作选项(有2个值，connect表示连接，disconnectall表示断开连接) 2.使用python的urllib2包提交post信息python提供的urllib2模块中，只需要以下几行代码即可方便的对指定url提交post信息。12request = urllib2.Request(posturl,postData,headers)conn = urllib2.urlopen(request) 其中posturl是要提交的url地址，postdata为提交的数据（一般为字典结构。），headers为数据包的包头信息（一般在做爬虫时若不提交该信息则服务器会拒绝这类请求。） 3.对得到的消息进行处理在提交post消息后，服务器会返回一个消息（页面），而用read这个方法1html = conn.read() 即可得到该页面。随后即可用re或者python出色的beautifulsoup库来对该页面进行处理。由于返回的页面包含中文字符而我们采用的编码格式为utf-8，所以要对该html页面进行编码（python中编码真的是一个非常令人讨厌的东西，所以用python时还是尽量避开中文！）。然后把编码后的东西直接丢给beautifulsoup就好啦。就是这么简单。12html = unicode(html,'gb2312').encode('utf8')soup = BeautifulSoup.BeautifulSoup(html) 这个beautifulsoup库相当于一个html解析器。你可以从中提取出任意标签中的消息。比如我发现我需要的提示消息都在td这个标签中，只需要这样写则可以得到所需标签中的信息。1soup.td.text 关于BeautifulSoup的详细信息请点击BeautifulSoup 4.可视化的表示在可视化方面我选择了使用非常广泛的tkinter库。主要是简单。关于Tkinter的教程请点击Tkinter 5.代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100#-*- coding:utf-8 -*-#-------------------------------------------------# 功能:实现东北大学ip网关的登陆，免去了打开浏览器登陆的麻烦# 作者：kingop# 完成时间：2015年6月22日# 版本：0.0.3# 注意：采用了base64加密。如果有人得到你的存储文件还是能把账号密码还原出来# 2015年6月30日 校园网取消了国内国际的限制。故将var1和相应的range取消#-------------------------------------------------import urllibimport urllib2import BeautifulSoupimport Tkinterimport tkMessageBoximport osimport base64#-------------------------------------------------postData = &#123; 'uid':'', 'password':'', 'range': '2', 'operation': '', 'timeout': '1', &#125;posturl = 'http://ipgw.neu.edu.cn/ipgw/ipgw.ipgw'#-------------------------------------------------------------------------------------------------if os.path.exists('nevertouch1.balabala') and os.path.exists('nevertouch2.balabala'): uid = open('nevertouch1.balabala','rb') pwd = open('nevertouch2.balabala','rb') postData['uid'] = base64.decodestring(uid.readline()) postData['password'] = base64.decodestring(pwd.readline()) uid.close() pwd.close()#这段文件读取的程序特别蛋疼。。当把用户名和密码存储在同一个文件时会出现在第二次运行时密码默认为换行符的bug #而且好像比较麻烦。。所以采用了两个文件的方式。分别存储用户名和密码 只存储一行 即没有那个问题。但是安全性就是问题了#-------------------------------------------------------------------------------------------------def reg(postData,posturl): headers = &#123; 'User-Agent':'Mozilla/5.0 (Windows N9T 6.3; WOW64; Trident/7.0; rv:11.0) like Gecko', 'Referer':'http://ipgw.neu.edu.cn/basic.html', &#125; postData['uid'] = username.get() postData['password'] = pwd.get()# if var1.get()==1:# postData['range'] = '1'# elif var1.get()==2:# postData['range'] = '2' if var2.get()==1: postData['operation'] = 'connect' elif var2.get()==2: postData['operation'] = 'disconnectall' postData = urllib.urlencode(postData) try: request = urllib2.Request(posturl,postData,headers) conn = urllib2.urlopen(request) html = conn.read() conn.close() html = unicode(html,'gb2312').encode('utf8') soup = BeautifulSoup.BeautifulSoup(html) tkMessageBox.showinfo("Tips", soup.td.text) except: tkMessageBox.showerror('Error', 'Please Check Your Connection To The Internet!') fp1 = open('nevertouch1.balabala','wb') fp2 = open('nevertouch2.balabala','wb') a = base64.encodestring(username.get()) b = base64.encodestring(pwd.get()) fp1.write(a) fp2.write(b) #a = username.get()+'\n'+pwd.get() fp1.close() fp2.close()#------------------------------------------------------------------------------------------------root = Tkinter.Tk()root.title(unicode('connect'))#root.geometry(100*100)#var1 = Tkinter.IntVar()var2 = Tkinter.IntVar()pwd = Tkinter.Entry()pwd.grid(row = 1,column = 2)pwd.insert(0, postData['password'])pwd['show'] = '*'pwd_show = Tkinter.Label(root,text = 'password: ')pwd_show.grid(row = 1,column = 0)username = Tkinter.Entry(root)username.grid(row = 0,column =2)username.insert(0, postData['uid'])username_show = Tkinter.Label(root,text = 'username: ')username_show.grid(row = 0,column = 0)#range1 = Tkinter.Radiobutton(root,variable = var1,text = 'in',value = 2)#range1.grid(row = 2,column = 1)#range2 = Tkinter.Radiobutton(root,variable = var1,text = 'out',value = 1)#range2.grid(row = 2,column = 2)op1 = Tkinter.Radiobutton(root,variable = var2,text = 'connect',value = 1)op1.grid(row = 3,column = 1)op2 = Tkinter.Radiobutton(root,variable = var2,text = 'disconnect',value = 2)op2.grid(row = 3,column = 2)submit = Tkinter.Button(root,text = 'log in',command = lambda:reg(postData,posturl))submit.grid(row = 4,column = 1)cancle = Tkinter.Button(root,text = 'quit',command = root.quit)cancle.grid(row = 4,column = 2)root.mainloop()]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[好多bug...]]></title>
    <url>%2F2015%2F10%2F20%2F%E5%A5%BD%E5%A4%9Abug%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[我的第一个blog]]></title>
    <url>%2F2015%2F10%2F20%2F%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AAblog%2F</url>
    <content type="text"><![CDATA[blog终于正式运作起来了。睡觉去咯。Good night!]]></content>
  </entry>
</search>
